$py(
import sys
import os
from gates import Gates
from netlist import Netlist
sys.stdout = open( opfile, 'w' )
nl2pmldir = os.environ['NL2PMLDIR']
gates = Gates( nl2pmldir + '/gates.json' )
nl = Netlist(modelfile,gatesjson)
behavpml = nl2pmldir + '/behav.pml'
import subprocess
def ltl2pml(ltl):
    return subprocess.check_output(['spin','-f',ltl],text=True)
)\
#define N_STATES $(nl.nStates())
bool state[N_STATES]
bool blocker[N_STATES]

$for(p in nl.pins())\
#define $(p.fullName()) $(p.id)
$endfor\

$for(p,m in nl.props.items())\
#define $(p) $(m)
$endfor\

$for(n,l in nl.ltl.items())\
$(ltl2pml(l))
$endfor\

inline createInsts() {
$for( inst in nl._insts.values() )\
$if(inst.typ != 'g_env')\
    run $(inst.gateFn())( $(inst.ipinargs()), $(inst.opinargs()) )
$endif\
$endfor\
}

inline initWires() {
$for(w in nl._wires.values())\
    run wire( $(w.i.fullName()), state[$(w.i.fullName())], $(w.o.fullName()), state[$(w.o.fullName())] )
$endfor\
}

inline initStates() {
$for(p in nl.pins())\
    state[$(p.fullName())] = $(p.init)
$endfor\
}

inline dumpState() {
    atomic {
$for(p in nl.pins())\
    printf("$(p.fullName())=%d\n",state[$(p.fullName())])
$endfor\
    }
}

$include(userpml)
$include(behavpml)
