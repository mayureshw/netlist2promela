$py(
LTLTOOL='ltl2ba' #spin
import sys
import os
from gates import Gates
from netlist import Netlist
sys.stdout = open( opfile, 'w' )
nl2pmldir = os.environ['NL2PMLDIR']
gates = Gates( nl2pmldir + '/gates.json' )
nl = Netlist(gatesjson,modelfile,propfile)
behavpml = nl2pmldir + '/behav.pml'
import subprocess
def ltl2pml(ltl):
    return subprocess.check_output([LTLTOOL,'-f',ltl],text=True)
)\
#define N_STATES $(nl.nStates())
bool state[N_STATES]
bool block_rise[N_STATES]
bool block_fall[N_STATES]

$for(p in nl.pins())\
#define $(p.fullName()) $(p.id)
$endfor\

$for(p in nl.pins())\
#define s_$(p.fullName()) state[$(p.fullName())]
$endfor\

$for(p,m in nl.extrastates.items())\
#define $(p) $(m)
$endfor\

$(ltl2pml(nl.ltl))

inline createInsts() {
$for( inst in nl._insts.values() )\
$if(inst.typ != 'g_env')\
    run $(inst.gateFn())( $(inst.argstr()) )
$endif\
$endfor\
}

inline initWires() {
$for(w in nl._wires.values())\
    run wire( $(w.i.fullName()), $(w.o.fullName()), s_$(w.i.fullName()), s_$(w.o.fullName()) )
$endfor\
}

inline blockUnblock( id,val ) {
$if( len(nl.blockers) > 0 )\
    if
$for( b in nl.blockers )\
    $(str(b))
$endfor\
$for( b in nl.unblockers )\
    $(str(b))
$endfor\
    :: else -> skip
    fi
$else\
    skip
$endif\
}

inline initStates() {
$for(p in nl.pins())\
    block_rise[$(p.fullName())] = 0
$endfor\
$for(p in nl.pins())\
    block_fall[$(p.fullName())] = 0
$endfor\
$for(p in nl.pins())\
    s_$(p.fullName()) = $(p.init)
$endfor\
}

inline dumpState() {
    atomic {
$for(p in nl.pins())\
    printf("$(p.fullName())=%d\n",s_$(p.fullName()))
$endfor\
    }
}

$include(behavpml)

// Forks (usually advisable to have constraints on them)
$for(p in nl.forks())\
// $(p.fullName())
$endfor\

$include(nl.postinit)
